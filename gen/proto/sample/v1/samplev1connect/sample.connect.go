// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/sample/v1/sample.proto

package samplev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	v1 "echo-me/gen/proto/sample/v1"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// SampleServiceName is the fully-qualified name of the SampleService service.
	SampleServiceName = "proto.sample.v1.SampleService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SampleServiceGreetProcedure is the fully-qualified name of the SampleService's Greet RPC.
	SampleServiceGreetProcedure = "/proto.sample.v1.SampleService/Greet"
	// SampleServiceErrProcedure is the fully-qualified name of the SampleService's Err RPC.
	SampleServiceErrProcedure = "/proto.sample.v1.SampleService/Err"
)

// SampleServiceClient is a client for the proto.sample.v1.SampleService service.
type SampleServiceClient interface {
	Greet(context.Context, *connect.Request[v1.GreetRequest]) (*connect.Response[v1.GreetResponse], error)
	Err(context.Context, *connect.Request[v1.ErrRequest]) (*connect.Response[v1.ErrResponse], error)
}

// NewSampleServiceClient constructs a client for the proto.sample.v1.SampleService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSampleServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SampleServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &sampleServiceClient{
		greet: connect.NewClient[v1.GreetRequest, v1.GreetResponse](
			httpClient,
			baseURL+SampleServiceGreetProcedure,
			opts...,
		),
		err: connect.NewClient[v1.ErrRequest, v1.ErrResponse](
			httpClient,
			baseURL+SampleServiceErrProcedure,
			opts...,
		),
	}
}

// sampleServiceClient implements SampleServiceClient.
type sampleServiceClient struct {
	greet *connect.Client[v1.GreetRequest, v1.GreetResponse]
	err   *connect.Client[v1.ErrRequest, v1.ErrResponse]
}

// Greet calls proto.sample.v1.SampleService.Greet.
func (c *sampleServiceClient) Greet(ctx context.Context, req *connect.Request[v1.GreetRequest]) (*connect.Response[v1.GreetResponse], error) {
	return c.greet.CallUnary(ctx, req)
}

// Err calls proto.sample.v1.SampleService.Err.
func (c *sampleServiceClient) Err(ctx context.Context, req *connect.Request[v1.ErrRequest]) (*connect.Response[v1.ErrResponse], error) {
	return c.err.CallUnary(ctx, req)
}

// SampleServiceHandler is an implementation of the proto.sample.v1.SampleService service.
type SampleServiceHandler interface {
	Greet(context.Context, *connect.Request[v1.GreetRequest]) (*connect.Response[v1.GreetResponse], error)
	Err(context.Context, *connect.Request[v1.ErrRequest]) (*connect.Response[v1.ErrResponse], error)
}

// NewSampleServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSampleServiceHandler(svc SampleServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	sampleServiceGreetHandler := connect.NewUnaryHandler(
		SampleServiceGreetProcedure,
		svc.Greet,
		opts...,
	)
	sampleServiceErrHandler := connect.NewUnaryHandler(
		SampleServiceErrProcedure,
		svc.Err,
		opts...,
	)
	return "/proto.sample.v1.SampleService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SampleServiceGreetProcedure:
			sampleServiceGreetHandler.ServeHTTP(w, r)
		case SampleServiceErrProcedure:
			sampleServiceErrHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSampleServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSampleServiceHandler struct{}

func (UnimplementedSampleServiceHandler) Greet(context.Context, *connect.Request[v1.GreetRequest]) (*connect.Response[v1.GreetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.sample.v1.SampleService.Greet is not implemented"))
}

func (UnimplementedSampleServiceHandler) Err(context.Context, *connect.Request[v1.ErrRequest]) (*connect.Response[v1.ErrResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.sample.v1.SampleService.Err is not implemented"))
}
