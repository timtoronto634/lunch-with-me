// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: slot/v1/slot.proto

package slotv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	v1 "echo-me/presentation/gen/slot/v1"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// SaveSlotServiceName is the fully-qualified name of the SaveSlotService service.
	SaveSlotServiceName = "presentation.slot.v1.SaveSlotService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SaveSlotServiceSaveSlotProcedure is the fully-qualified name of the SaveSlotService's SaveSlot
	// RPC.
	SaveSlotServiceSaveSlotProcedure = "/presentation.slot.v1.SaveSlotService/SaveSlot"
)

// SaveSlotServiceClient is a client for the presentation.slot.v1.SaveSlotService service.
type SaveSlotServiceClient interface {
	SaveSlot(context.Context, *connect.Request[v1.SaveSlotRequest]) (*connect.Response[v1.SaveSlotResponse], error)
}

// NewSaveSlotServiceClient constructs a client for the presentation.slot.v1.SaveSlotService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSaveSlotServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SaveSlotServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &saveSlotServiceClient{
		saveSlot: connect.NewClient[v1.SaveSlotRequest, v1.SaveSlotResponse](
			httpClient,
			baseURL+SaveSlotServiceSaveSlotProcedure,
			opts...,
		),
	}
}

// saveSlotServiceClient implements SaveSlotServiceClient.
type saveSlotServiceClient struct {
	saveSlot *connect.Client[v1.SaveSlotRequest, v1.SaveSlotResponse]
}

// SaveSlot calls presentation.slot.v1.SaveSlotService.SaveSlot.
func (c *saveSlotServiceClient) SaveSlot(ctx context.Context, req *connect.Request[v1.SaveSlotRequest]) (*connect.Response[v1.SaveSlotResponse], error) {
	return c.saveSlot.CallUnary(ctx, req)
}

// SaveSlotServiceHandler is an implementation of the presentation.slot.v1.SaveSlotService service.
type SaveSlotServiceHandler interface {
	SaveSlot(context.Context, *connect.Request[v1.SaveSlotRequest]) (*connect.Response[v1.SaveSlotResponse], error)
}

// NewSaveSlotServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSaveSlotServiceHandler(svc SaveSlotServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	saveSlotServiceSaveSlotHandler := connect.NewUnaryHandler(
		SaveSlotServiceSaveSlotProcedure,
		svc.SaveSlot,
		opts...,
	)
	return "/presentation.slot.v1.SaveSlotService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SaveSlotServiceSaveSlotProcedure:
			saveSlotServiceSaveSlotHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSaveSlotServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSaveSlotServiceHandler struct{}

func (UnimplementedSaveSlotServiceHandler) SaveSlot(context.Context, *connect.Request[v1.SaveSlotRequest]) (*connect.Response[v1.SaveSlotResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("presentation.slot.v1.SaveSlotService.SaveSlot is not implemented"))
}
